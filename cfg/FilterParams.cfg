#!/usr/bin/env python
PACKAGE = "lane_line_detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Region of Interest (ROI)
gen.add("roi_x0", int_t, 0, "Origin - x", 0, 0, 2000)
gen.add("roi_y0", int_t, 0, "Origin - y", 325, 0, 2000)
gen.add("roi_x1", int_t, 0, "Destination - x", 640, 0, 2000)
gen.add("roi_y1", int_t, 0, "Destination - y", 470, 0, 2000)

# Yellow Lower Bound
gen.add("yellow_lower_r", int_t, 0, "Yellow scalar [r]ed lower bound", 0, 0, 255)
gen.add("yellow_lower_g", int_t, 0, "Yellow scalar [g]reen lower bound", 230, 0, 255)
gen.add("yellow_lower_b", int_t, 0, "Yellow scalar [b]lue lower bound", 230, 0, 255)

# Yellow Upper Bound
gen.add("yellow_upper_r", int_t, 0, "Yellow scalar [r]ed upper bound", 0, 0, 255)
gen.add("yellow_upper_g", int_t, 0, "Yellow scalar [g]reen upper bound", 255, 0, 255)
gen.add("yellow_upper_b", int_t, 0, "Yellow scalar [b]lue upper bound", 255, 0, 255)

# White Lower Bound
gen.add("white_lower_r", int_t, 0, "White scalar [r]ed lower bound", 23, 0, 255)
gen.add("white_lower_g", int_t, 0, "White scalar [g]reen lower bound", 88, 0, 255)
gen.add("white_lower_b", int_t, 0, "White scalar [b]lue lower bound", 0, 0, 255)

# White Upper Bound
gen.add("white_upper_r", int_t, 0, "White scalar [r]ed upper bound", 65, 0, 255)
gen.add("white_upper_g", int_t, 0, "White scalar [g]reen upper bound", 146, 0, 255)
gen.add("white_upper_b", int_t, 0, "White scalar [b]lue upper bound", 204, 0, 255)

# Gaussian Blur
gen.add("size_m", int_t, 0, "Length m", 640, 0, 1920)
gen.add("size_n", int_t, 0, "Width n", 480, 0, 1920)
gen.add("sigma_x", double_t, 0, "Standard deviation x", 1, 0, 6)
gen.add("sigma_y", double_t, 0, "Standard deviation y", 0, 0, 6)

# Canny Edge Detection
gen.add("thr_1", double_t, 0, "Threshold 1", 50, 0, 500)
gen.add("thr_2", double_t, 0, "Threshold 2", 150, 0, 500)
gen.add("aperture_size", int_t, 0, "Aperture Size", 3, 0, 10)
gen.add("l2_gradient", bool_t, 0, "L2 Gradient", False)

# Hough Line Transform
gen.add("rho", double_t, 0, "Rho", 1, 0.01, 6.28)
gen.add("theta", double_t, 0, "Theta", 0, 0, 6.28)
gen.add("threshold", int_t, 0, "Threshold", 0, 0, 255)
gen.add("min_line_length", double_t, 0, "Min Line Length", 0, 0, 500)
gen.add("max_line_gap", double_t, 0, "Max Line Gap", 0, 0, 500)

exit(gen.generate(PACKAGE, "lane_line_detection_node", "FilterParams"))